name: Build and Deploy Web App

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-version: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: github.event_name != 'pull_request'
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  validate:
    name: Validate Ansible
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible kubernetes openshift PyYAML

      - name: Install Kubernetes collection
        run: |
          ansible-galaxy collection install kubernetes.core

      - name: Run Ansible syntax check
        run: |
          cd ansible
          ansible-playbook playbooks/deploy-webapp.yml --syntax-check
          ansible-playbook playbooks/rollback.yml --syntax-check

      - name: Verify Ansible installation
        run: |
          ansible --version
          ansible-galaxy collection list

      - name: Validation Summary
        run: |
          echo "## Validation Summary âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Ansible syntax check passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Kubernetes collection installed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… All playbooks validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Actual deployment requires a Kubernetes cluster." >> $GITHUB_STEP_SUMMARY
          echo "Use the image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-version }}\`" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deployment-summary:
    name: Deployment Instructions
    runs-on: ubuntu-latest
    needs: [build, validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Create deployment instructions
        run: |
          echo "## ðŸš€ Deployment Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`${{ needs.build.outputs.image-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deploy to Your Local Kubernetes" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Clone repository" >> $GITHUB_STEP_SUMMARY
          echo "git clone https://github.com/${{ github.repository }}.git" >> $GITHUB_STEP_SUMMARY
          echo "cd webapp-ansible-k8s" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Deploy using quickstart" >> $GITHUB_STEP_SUMMARY
          echo "./quickstart.sh deploy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or using make" >> $GITHUB_STEP_SUMMARY
          echo "make deploy VERSION=${{ needs.build.outputs.image-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or using Ansible directly" >> $GITHUB_STEP_SUMMARY
          echo "cd ansible" >> $GITHUB_STEP_SUMMARY
          echo "APP_VERSION=${{ needs.build.outputs.image-version }} ansible-playbook playbooks/deploy-webapp.yml" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Application" >> $GITHUB_STEP_SUMMARY
          echo "After deployment: http://localhost" >> $GITHUB_STEP_SUMMARY
